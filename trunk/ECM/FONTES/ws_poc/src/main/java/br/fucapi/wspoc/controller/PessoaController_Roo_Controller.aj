// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.fucapi.wspoc.controller;

import br.fucapi.wspoc.controller.PessoaController;
import br.fucapi.wspoc.domain.Pessoa;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PessoaController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PessoaController.create(@Valid Pessoa pessoa, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, pessoa);
            return "pessoas/create";
        }
        uiModel.asMap().clear();
        pessoaServico.savePessoa(pessoa);
        return "redirect:/pessoas/" + encodeUrlPathSegment(pessoa.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PessoaController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Pessoa());
        return "pessoas/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PessoaController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("pessoa", pessoaServico.findPessoa(id));
        uiModel.addAttribute("itemId", id);
        return "pessoas/show";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PessoaController.update(@Valid Pessoa pessoa, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, pessoa);
            return "pessoas/update";
        }
        uiModel.asMap().clear();
        pessoaServico.updatePessoa(pessoa);
        return "redirect:/pessoas/" + encodeUrlPathSegment(pessoa.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PessoaController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, pessoaServico.findPessoa(id));
        return "pessoas/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String PessoaController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Pessoa pessoa = pessoaServico.findPessoa(id);
        pessoaServico.deletePessoa(pessoa);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/pessoas";
    }
    
    void PessoaController.populateEditForm(Model uiModel, Pessoa pessoa) {
        uiModel.addAttribute("pessoa", pessoa);
    }
    
    String PessoaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
