/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SwingSigner.java
 *
 * Created on 23/11/2011, 13:04:57
 */
package br.fucapi.ads.assinaturadigital.applet;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Provider;
import java.security.Security;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.LayoutStyle;

import sun.security.mscapi.SunMSCAPI;
import br.fucapi.ads.assinaturadigital.applet.worker.AssinarDocumentoWorker;
import br.fucapi.ads.assinaturadigital.applet.x509.exception.X509ValidationException;


/**
 * Componente Generico de Apresentacao das assinaturas cadastradas no Repositorio de Chaves
 *
 * @author Natanael Fonseca
 */
public class SwingSigner extends JFrame {
	
	private static final long serialVersionUID = -366071905537477083L;
	
	private AbstractComponentSigner viewer;
	private Object[] aliasesList;
	private KeyStore ksWinUser;

	private LoadindDialog dialog;
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton cancelButton;
    private JLabel certificateLabel;
    private JComboBox certificateList;
    private JPanel jPanel1;
    private JButton okButton;
    // End of variables declaration//GEN-END:variables
	
    /** Creates new form SwingSigner */
	public SwingSigner(AbstractComponentSigner viewer, 
					   boolean moreThanOne) throws	KeyStoreException, 
					   								NoSuchAlgorithmException, 
					   								CertificateException, 
					   								IOException {
		
		this.viewer = viewer;		
		
		loadCertificationInfo();
	}
	
	public void loadCertificationInfo() throws	KeyStoreException, 
												NoSuchAlgorithmException, 
												CertificateException, 
												IOException {		
		
		// Estipulando o provider que sera utilizado "SUN MSCAPI".
		Provider provider = new SunMSCAPI();
		Security.addProvider(provider);

		// Obtendo as keystores do SO				
		KeyStore ksWinUser = KeyStore.getInstance("Windows-MY");		
		ksWinUser.load(null, null);
		
		// Recuperando os aliases que existem na keystore de usuario
		Enumeration<String> en = ksWinUser.aliases();
		
		ArrayList<String> aliasesList = Collections.list( en );
		
		this.aliasesList =  aliasesList.toArray();
		
		this.ksWinUser = ksWinUser;	
		
		if( certificateList != null ){
			certificateList.setModel(
					new DefaultComboBoxModel( 
							this.aliasesList ));			
		}		
		
		initComponents();
	}


	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() { 
    	
    	Toolkit tk = Toolkit.getDefaultToolkit();
	    Dimension screenSize = tk.getScreenSize();
    	int screenHeight = screenSize.height;
    	int screenWidth = screenSize.width;
    	
    	this.setLocation(screenWidth / 4, screenHeight / 4);
    	
		if (aliasesList.length == 0 ) {
			
			String msg = 
			"<html><head></head><body style='text-align=center;' >" +
		 		"<p style=\"text-align=center;\">N&atilde;o h&aacute; certificados dispon&iacute;veis na lista dos certificados instalados pelo sistema operacional!</p>" +
		 	"<body></html>";
						
			//Panel onde fica a Mensagem 
			JPanel labelPanel = new JPanel( new BorderLayout() );
			JLabel labelMsg = new JLabel( msg );
			labelPanel.add( labelMsg, BorderLayout.CENTER );								

			//Panel onde fica o botao OK
			JPanel buttonPanel = new JPanel( new FlowLayout() );
			JButton okButton = new JButton("OK");
			okButton.addActionListener( new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					// Mesma funcionalidade do Botao Cancel - Deve fechar a tela.
					cancelButtonActionPerformed(e);
				}
			});
			
			buttonPanel.add( okButton );
						
			this.add( labelPanel, BorderLayout.CENTER );
			this.add( buttonPanel, BorderLayout.SOUTH );			
			this.setSize( 600, 180 );			
			
			return;
		}
		
		this.setDefaultCloseOperation( JFrame.DISPOSE_ON_CLOSE );
    	
        okButton = new JButton();
        cancelButton = new JButton();
        jPanel1 = new JPanel();
        certificateLabel = new JLabel();
        certificateList = new JComboBox();

        okButton.setText("OK");
        okButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        certificateLabel.setText("Certificado :");

        certificateList.setModel(new DefaultComboBoxModel( aliasesList ));

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGap(18, 18, 18)
                .addComponent(certificateLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(certificateList, 0, 310, Short.MAX_VALUE))
                .addContainerGap())
        );
        
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1,	GroupLayout.DEFAULT_SIZE, 
                        						GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(certificateLabel)
                            .addComponent(certificateList,	GroupLayout.PREFERRED_SIZE, 
                            								GroupLayout.DEFAULT_SIZE, 
                            								GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(okButton)
                            .addComponent(cancelButton))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed        
    	
    	try {						
//    			URL url = new URL("javascript:self.close()");
    			URL url = new URL("dlg2.close();PrimeFaces.ab({source:'form2:fechar'});return false;");
    			
				viewer.getAppletContext().showDocument( url );
		} catch (MalformedURLException me) {
			me.printStackTrace();
		} 
    	
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(ActionEvent evt)  {//GEN-FIRST:event_okButtonActionPerformed
    	
    	try{
        
			// Recupera o alias do certificado selecionado pelo usuario
			String chosenAlias = (String) certificateList.getSelectedItem();
	
			// Nesse ponto tenta-se recuperar a chave privada do token, contudo, 
			// passo null para a senha para poder autenticar no hardware diretamente
			PrivateKey privateKey = (PrivateKey) ksWinUser.getKey( chosenAlias, null );
			Certificate[] chain = ksWinUser.getCertificateChain( chosenAlias );			
			
			if( privateKey == null ){
				
				String msg = "Para realizar a assinatura digital é necessário que dispositivo eletrônico esteja conectado ao computador. Favor conectar.";
				
				JOptionPane.showMessageDialog( this, msg);
				
				new X509ValidationException(msg).printStackTrace();
				
				return;
			}			
	        
			// Chama a thread de trabalho pra realizar a operacao
			AssinarDocumentoWorker worker = new AssinarDocumentoWorker( viewer, this, privateKey, chain );
			worker.execute();
			
//			ImageIcon icon = new ImageIcon( viewer.getImage( viewer.getCodeBase(), "imagens/aguarde.gif") );
			ImageIcon icon = new ImageIcon( viewer.getImage( viewer.getCodeBase(), "resources/images/components/ajax/loading.gif") );
			dialog = new LoadindDialog( this, true, icon );        
	        dialog.setLocationRelativeTo( this );
	        dialog.setVisible( true );
                
    	}catch(UnrecoverableKeyException e){
    		e.printStackTrace();        
        } catch (KeyStoreException e) {
        	e.printStackTrace(); 
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}

    }//GEN-LAST:event_okButtonActionPerformed


	public LoadindDialog getDialog() {
		return dialog;
	}

}